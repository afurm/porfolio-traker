// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  assets        Asset[]
  portfolios    Portfolio[]
  transactions  Transaction[]
  alerts        Alert[]
  settings      Settings?
}

model Asset {
  id            String   @id @default(uuid())
  userId        String
  coinId        String
  coinName      String
  symbol        String
  amount        Float
  purchasePrice Float
  currentPrice  Float
  priceChange24h Float
  lastUpdated   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  alerts        Alert[]

  @@index([userId])
  @@index([coinId])
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  assetId   String
  type      String   // 'buy' or 'sell'
  amount    Float
  price     Float
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([assetId])
}

model Portfolio {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Alert {
  id        String   @id @default(uuid())
  userId    String
  assetId   String
  type      String   // 'price', 'change', or 'volume'
  condition String   // 'above' or 'below'
  value     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([assetId])
}

model Settings {
  id            String   @id @default(uuid())
  userId        String   @unique
  currency      String   @default("USD")
  language      String   @default("en")
  rtl           Boolean  @default(false)
  theme         String   @default("system")
  notifications Json     // Includes priceAlerts, newsAlerts, portfolioUpdates, email, push
  display       Json     // Includes showSmallBalances, defaultView, chartPeriod, chartType
  security      Json     // Includes twoFactor, sessionTimeout
  privacy       Json     // Includes dataSharing, analytics
  accessibility Json     // Includes highContrast, fontSize, reduceAnimations
  mobile        Json     // Includes touchInteraction, pushNotifications, optimizeData
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 